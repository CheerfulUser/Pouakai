def fitted_line(model, sn):
    return model[1] + model[0] * np.log10(sn)
    
def magnitude_limit(phots, zp, sn):
    """Returns the magnitude limit of the filter at a given signal to noise raio"""
    counts_to_noise = phots['aper_sum_bkgsub'] / (phots['aperture_std'])
    yz = np.linspace(1,10**5,295)
    mag = np.isfinite(phots['mag'].values) & np.isfinite(np.log10(counts_to_noise.values)) & np.isfinite(zp.values)
    model = np.polyfit(np.log10(counts_to_noise.values)[mag], (phots['mag']+zp).values[mag], 1)
    sigclip = ~sigma_clip((phots['mag']+zp)[mag] - fitted_line(model, counts_to_noise[mag])).mask
    fitted_model, cov = np.polyfit(np.log10(counts_to_noise)[mag][sigclip], (phots['mag']+zp).values[mag][sigclip], 1, cov=True)
    pfit = np.polyfit((phots['mag']+zp)[mag][sigclip],np.log10(counts_to_noise[mag][sigclip]), 2)
    chi_squared = np.sum((np.polyval(pfit, (phots['mag']+zp)[mag][sigclip]) - np.log10(counts_to_noise[mag][sigclip])) ** 2)

    print(np.sqrt(np.diag(cov)))
    print()
    print(cov)
    
    plt.figure()
    plt.plot((phots['mag']+zp)[mag][sigclip],np.log10(counts_to_noise[mag][sigclip]),'.')
    plt.plot(fitted_line(fitted_model,yz),np.log10(yz),'r-')

    plt.axhline(np.log10(3))
    plt.ylabel('log10(Signal-Noise Ratio)')
    plt.xlabel('Magnitude Limit')

    plt.text(13,4.5,'The Magnitude Limit Corresponding to a Signal')
    plt.text(15.4,4,'to Noise Ratio of {} is {:.2f}'.format(sn, fitted_line(fitted_model,sn)))
    plt.text(10.5,2,'The Chi Square \n  Value is {:.2f}'.format(chi_squared))
    plt.savefig('Better Magnitude Limit Figure.png')
    
    return(fitted_line(fitted_model,3))